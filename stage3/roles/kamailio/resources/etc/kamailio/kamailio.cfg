
#!KAMAILIO
#
# Kamailio (OpenSER) SIP Server v5.0 - default configuration script
#     - web: https://www.kamailio.org
#     - git: https://github.com/kamailio/kamailio
#
# Direct your questions about this file to: <sr-users@lists.kamailio.org>
#
# Refer to the Core CookBook at https://www.kamailio.org/wiki/
# for an explanation of possible statements, functions and parameters.
#
# Note: the comments can be:
#     - lines starting with #, but not the pre-processor directives,
#       which start with #!, like #!define, #!ifdef, #!endif, #!else, #!trydef,
#       #!subst, #!substdef, ...
#     - lines starting with //
#     - blocks enclosed in between /* */
#
# Several features can be enabled using '#!define WITH_FEATURE' directives:
#
# *** To run in debug mode:
#     - define WITH_DEBUG
#
# *** To block 3XX redirect replies execute:
#     - define WITH_BLOCK3XX
#
# *** To block 401 and 407 authentication replies execute:
#     - define WITH_BLOCK401407
#

####### Defined Values #########

# *** Value defines - IDs used later in config
# - flags
#   FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7
##!define WITH_DEBUG
####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL0

/* number of SIP routing processes */
children=4

/* uncomment the next line to disable TCP (default on) */
disable_tcp=yes

/* uncomment and configure the following line if you want Kamailio to
 * bind on a specific interface/port/proto (default bind on all available) */
#!substdef "!MY_LOCAL_IP!{{ ansible_eth1.ipv4.address }}!g"
#!substdef "!MY_PUBLIC_IP!{{ ansible_eth2.ipv4.address }}!g"

listen=udp:MY_LOCAL_IP:5060
listen=udp:MY_PUBLIC_IP:5060

# *** upon a failed request routing to it. This parameter is only used, when the TM-Module is loaded. 
# *** If set to “0”, the pinging of inactive gateway is disabled
#	- default: 10
#----------------------------------------------------------------------------------------------------------
#
#!define DS_PING_INTERVAL 10


# *** If you want to set a gateway into inactive mode, there can be a specific number of failed requests until 
# *** it will change from "active" to "inactive". It is using the state "trying", that allows selection of 
# *** gateway but indicates there was a failure previously with the gateway. The number of attempts can be 
# *** set with this parameter. This parameter can be modified via ser config framework
#	- default: 3
#------------------------------------------------------------------------------------------------------------
#
#!define DS_PROBING_THRESHOLD 3


# *** It is settings for the balancing of SIP-messages to APP hosts
# 	- Run command: kamctl dispatcher addgw 1 sip:192.168.2.237:5060 0 'P90 APP1'
#			1 - it is GROUPID_APP_HOSTS, 0 - it is flag (default 0)
#	- default: 1
#-------------------------------------------------------------------------------
#
#!substdef "!CC_MRF_HOSTS!1!g"

# *** It is a global setting of type method of balancing
#	 - default: 0
#
#	“0” - hash over callid
#	“1” - hash over from uri.
#	“2” - hash over to uri.
#	“3” - hash over request-uri.
#	“4” - round-robin (next destination).
#	“5” - hash over authorization-username (Proxy-Authorization or "normal" authorization). 
#		If no username is found, round robin is used.
#	“6” - random (using rand()).
#	“7” - hash over the content of PVs string. Note: This works only when the parameter hash_pvar is set.
#	“8” - use first destination (good for failover).
#	“9” - use weight based load distribution. You have to set the attribute 'weight' 
#		per each address in destination set.
#	“10” - use call load distribution. You have to set the attribute 'duid' (as an unique string id) 
#		per each address in destination set. Also, you must set parameters 'dstid_avp' and 'ds_hash_size'.
#-----------------------------------------------------------------------------------------------------------------
#
#!substdef "!METHOD_BALANCING!4!g"

#!ifdef WITH_TLS
enable_tls=no
#!endif

# let kamailio choose the right source IP address
mhomed=1

####### Modules Section ########

/* set paths to location of modules */
# mpath="/usr/lib64/kamailio/modules/"

loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"
loadmodule "dispatcher.so"
#loadmodule "sctp.so"

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

# ----------------- setting module-specific parameters ---------------
#enable_sctp=1

# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)
/* set the path to RPC fifo control file */
# modparam("jsonrpcs", "fifo_name", "/var/run/kamailio/kamailio_rpc.fifo")
/* set the path to RPC unix socket control file */
# modparam("jsonrpcs", "dgram_socket", "/var/run/kamailio/kamailio_rpc.sock")

# ----- ctl params -----
/* set the path to RPC unix socket control file */
# modparam("ctl", "binrpc", "unix:/var/run/kamailio/kamailio_ctl")

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)

# ------ dispatcher params -----
#modparam("dispatcher", "db_url", DBURL)
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "dst_avp", "$avp(dsdst)")
modparam("dispatcher", "grp_avp", "$avp(dsgrp)")
modparam("dispatcher", "cnt_avp", "$avp(dscnt)")
modparam("dispatcher", "dstid_avp", "$avp(dsdstid)")
modparam("dispatcher", "attrs_avp", "$avp(dsattrs)")
modparam("dispatcher", "hash_pvar", "$avp(i:273)")
modparam("dispatcher", "setid_pvname", "$var(setid)")
modparam("dispatcher", "ds_ping_method", "OPTIONS")
modparam("dispatcher", "ds_ping_from", "sip:noreply@MY_LOCAL_IP")
modparam("dispatcher", "ds_ping_interval", DS_PING_INTERVAL)
modparam("dispatcher", "ds_probing_threshold", DS_PROBING_THRESHOLD)
modparam("dispatcher", "ds_ping_reply_codes", "code=200")
modparam("dispatcher", "ds_probing_mode", 1)
modparam("dispatcher", "ds_hash_size", 9)
modparam("dispatcher", "ds_hash_expire", 3600)
modparam("dispatcher", "ds_hash_initexpire", 60)
modparam("dispatcher", "ds_hash_check_interval", 10)

# ----- rr params -----
# set next param to 1 to add value to ;lr param (helps with some UAs)
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 1)

# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
/* uncomment the next line to disable parallel forking via location */
# modparam("registrar", "append_branches", 0)
/* uncomment the next line not to allow more than 10 contacts per AOR */
# modparam("registrar", "max_contacts", 10)
/* max value for expires of registrations */
modparam("registrar", "max_expires", 3600)
/* set it to 1 to enable GRUU */
modparam("registrar", "gruu_enabled", 0)

# ----- acc params -----
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
/* by default ww do not adjust the direct of the sequential requests.
 * if you enable this parameter, be sure the enable "append_fromtag"
 * in "rr" module */
modparam("acc", "detect_direction", 0)
/* account triggers (flags) */
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
/* enhanced DB accounting */

# ----- permissions params -----
#!ifdef WITH_IPAUTH
modparam("permissions", "db_url", DBURL)
modparam("permissions", "db_mode", 1)
#!endif

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
#!endif

/* RTKINCFG-455 disable remap 503 to 500 status */
modparam("tm", "remap_503_500", 0)

auto_aliases=no
use_dns_cache=off

# Custom variable for prestop SIP traffic RTKINCFG-438
teligent.prestop = 0 desc "prestop SIP traffic"

####### Routing Logic ########


/* Main SIP request routing logic
 * - processing of any incoming SIP request starts with this route
 * - note: this is the same as route { ... } */
request_route {


        # OPTIONS answer
        if is_method("OPTIONS") {
                sl_send_reply("200","OK");
                exit;
        }

	# per request initial checks
	route(REQINIT);

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

	# handle retransmissions
	if (!is_method("ACK")) {
		if(t_precheck_trans()) {
			t_check_trans();
			exit;
		}
		t_check_trans();
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE")) {
		record_route();
	}

	# account only INVITEs
	if (is_method("INVITE")) {
		setflag(FLT_ACC); # do accounting
	}

	# handle request without SIP dialogs
	route(WITHOUTDLG);

	# to P90
	route(to_P90);


	### requests for my local domains

	# handle presence related requests
	route(PRESENCE);

	if ($rU==$null) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	route(RELAY);

}

# 22/08/2013
# The change of SDP doesn't work, when INVITE goes to MSC
# version 1.3
#!ifdef WITH_MSC
route[to_one_MSC] {
    # enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
    if (is_method("INVITE|SUBSCRIBE")) {
		t_on_branch("MANAGE_BRANCH");
		t_on_reply("MANAGE_REPLY");
	}
	if (is_method("INVITE")) {
		t_on_failure("MANAGE_FAILURE");
	}

    if(t_relay("MSC_IP", "MSC_PORT")) {
        xlog("L_INFO","Everything seems to be OK; DU is $du\n");
        exit;
    } else {
        sl_reply_error();
        exit;
    }

exit;
}
#!endif

# Wrapper for relaying requests
route[RELAY] {

	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}
	if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}
	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}

	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

# Per SIP request initial checks
route[REQINIT] {
#!ifdef WITH_ANTIFLOOD
	# flood detection from same IP and traffic ban for a while
	# be sure you exclude checking trusted peers, such as pstn gateways
	# - local host excluded (e.g., loop to self)
	if(src_ip!=myself) {
		if($sht(ipban=>$si)!=$null) {
			# ip is already blocked
			xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
			exit;
		}
		if (!pike_check_req()) {
			xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
			$sht(ipban=>$si) = 1;
			exit;
		}
	}
	if($ua =~ "friendly-scanner|sipcli") {
		# silent drop for scanners - uncomment next line if want to reply
		# sl_send_reply("200", "OK");
		exit;
	}
#!endif

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(is_method("OPTIONS") && uri==myself && $rU==$null) {
		sl_send_reply("200","Keepalive");
		exit;
	}

	if(!sanity_check("1511", "7")) {
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}
}

# handle request without SIP dialogs
route [WITHOUTDLG] {

	if(!has_totag()) {
		if(loose_route()) {
			route(RELAY);
		} else {
			return;
		}
	} else {
		return;
	}
}

# Handle requests within SIP dialogs
route[WITHINDLG] {

	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			if ( is_method("ACK") ) {
				# ACK is forwarded statelessy
				route(NATMANAGE);
			}
			else if ( is_method("NOTIFY") ) {
				# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
				record_route();
			}
			route(RELAY);
		} else {
			if (is_method("SUBSCRIBE") && uri == myself) {
				# in-dialog subscribe requests
				route(PRESENCE);
				exit;
			}
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# no loose-route, but stateful ACK;
					# must be an ACK after a 487
					# or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ... ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
}

# Presence server route
route[PRESENCE] {

	if(!is_method("PUBLISH|SUBSCRIBE"))
		return;

	# if presence enabled, this part will not be executed
	if (is_method("PUBLISH|SUBSCRIBE") || $rU==$null)
	{
		sl_send_reply("404", "Not here");
		exit;
	}
	return;
}

# RTPProxy control and signaling updates for NAT traversal
route[NATMANAGE] {
#!ifdef WITH_NAT
	if (is_request()) {
		if(has_totag()) {
			if(check_route_param("nat=yes")) {
				setbflag(FLB_NATB);
			}
		}
	}
	if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB))) return;

	if(nat_uac_test("8")) {
		rtpproxy_manage("co");
	} else {
		rtpproxy_manage("cor");
	}

	if (is_request()) {
		if (!has_totag()) {
			if(t_is_branch_route()) {
				add_rr_param(";nat=yes");
			}
		}
	}
	if (is_reply()) {
		if(isbflagset(FLB_NATB)) {
			if(is_first_hop())
				set_contact_alias();
		}
	}
#!endif
	return;
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
	xdbg("new branch [$T_branch_idx] to $ru\n");
	route(NATMANAGE);
}

# Manage incoming replies
onreply_route[MANAGE_REPLY] {
	xdbg("incoming reply\n");
	if(status=~"[12][0-9][0-9]") {
		route(NATMANAGE);
	}
}

# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
	route(NATMANAGE);

	if (t_is_canceled()) exit;

#!ifdef WITH_BLOCK3XX
	# block call redirect based on 3xx replies.
	if (t_check_status("3[0-9][0-9]")) {
		t_reply("404","Not found");
		exit;
	}
#!endif

#!ifdef WITH_BLOCK401407
	# block call redirect based on 401, 407 replies.
	if (t_check_status("401|407")) {
		t_reply("404","Not found");
		exit;
	}
#!endif
}

# P90 HOSTS
route [to_P90] {
	if(is_method("INVITE") && !(search_hf("From", "@p90.sip.agent", "a")) && 
	    !(ds_is_from_list("CC_MRF_HOSTS")) && (from_uri!=myself)) {
		xlog("L_INFO", "It is a call from SBC or MSC. It routes over the 'to_p90'\n");
		if (dst_port == 5060) {
			if (ds_select_dst("CC_MRF_HOSTS", "METHOD_BALANCING")) {
				route(RELAY);
			}
		}
		xlog("L_ERR", "Cannot find destination for INVITE <$ru>\n");
		sl_send_reply("404","No destination configured");
		exit;
	}
}

# Dispatcher
event_route[dispatcher:dst-down] {
    xlog("L_INFO", "Destination down: $rm $ru ($du)\n");
}

event_route[dispatcher:dst-up] {
    xlog("L_INFO", "Destination up: $rm $ru\n");
}
